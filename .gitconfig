[apply]
        whitespace = strip

[diff]
        color = true
        rename = copy

[pager]
        color = true

[status]
        color = auto
[user]
	name = Nick Jones
	email = darellik@gmail.com
[github]
	user = nickjones
	email = darellik@gmail.com

[difftool.latex]
	cmd = git-latexdiff "$LOCAL" "$REMOTE"

[difftool]
	prompt = false

[alias]
        ci = commit -a
        stat = status
        praise = blame
        sb = show-branch
	di = diff-index -p --cached
	ldiff = difftool -t latex
	sta = status -sb
	st = status -sb .
	ls = log --pretty=format:\"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]\" --decorate --date=short
	graph = log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset'
	## Aliases from mathiasbynens@github
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git din $number` shows the diff between the state `$number` revisions ago and the current state
	din = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Switch to a branch without resetting or forcing
	co = checkout
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	diff-highlight = "!f() { git diff --color \"$@\" | /user/njones/bin/diff-highlight; }; f | less -r"
	accept-ours = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --ours -- $files; git add -u $files; }; f"
	accept-theirs = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --theirs -- $files; git add -u $files; }; f"
	branch-parent-hash = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git merge-base master $BRANCH; }; f"
	branch-name = "!f() { git rev-parse --abbrev-ref HEAD; }; f"
	bstats = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); ROOT=$(git merge-base master $BRANCH); git diff --stat --color $ROOT..$BRANCH; }; f"
	bstats-master = "!f() { git rev-parse --abbrev-ref HEAD; }; git diff --stat --color master..$f"
	graph-local = "!f() { git graph --branches --not --remotes; }; f"
	fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
	squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
	ri = rebase --interactive --autosquash

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master
[core]
	excludesfile = $HOME/.gitignore
[pull]
	rebase = true
[rebase]
	autosquash = true
